// <auto-generated />
using System;
using Alex_Andersen.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Alex_Andersen.Migrations
{
    [DbContext(typeof(EFContext))]
    partial class EFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Alex_Andersen.Models.Availability", b =>
                {
                    b.Property<int>("AvailabilityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AvailabilityStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AvailabilityID");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Cities", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityZip")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentsDepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversDriverId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationsLocationID")
                        .HasColumnType("int");

                    b.HasKey("CityID");

                    b.HasIndex("DepartmentsDepartmentID");

                    b.HasIndex("DriversDriverId");

                    b.HasIndex("LocationsLocationID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Countries", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CitiesCityID")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentsDepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversDriverId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationsLocationID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.HasIndex("CitiesCityID");

                    b.HasIndex("DepartmentsDepartmentID");

                    b.HasIndex("DriversDriverId");

                    b.HasIndex("LocationsLocationID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Departments", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TripsTripID")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.HasIndex("TripsTripID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Drivers", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvailabilityID")
                        .HasColumnType("int");

                    b.Property<string>("DriverResidence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDriverActive")
                        .HasColumnType("bit");

                    b.HasKey("DriverId");

                    b.HasIndex("AvailabilityID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Locations", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LocationAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Messages", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMessageRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserMessagesUserMessageID")
                        .HasColumnType("int");

                    b.HasKey("MessageID");

                    b.HasIndex("UserMessagesUserMessageID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Roles", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("RoleID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TripsTripID")
                        .HasColumnType("int");

                    b.HasKey("StatusID");

                    b.HasIndex("TripsTripID");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Alex_Andersen.Models.TripLocations", b =>
                {
                    b.Property<int>("TripLocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("LocationType")
                        .HasColumnType("bit");

                    b.HasKey("TripLocationID");

                    b.ToTable("TripLocations");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Trips", b =>
                {
                    b.Property<int>("TripID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTripExpress")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TripLocationsTripLocationID")
                        .HasColumnType("int");

                    b.HasKey("TripID");

                    b.HasIndex("TripLocationsTripLocationID");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Alex_Andersen.Models.TypePreferences", b =>
                {
                    b.Property<int>("TypePreferenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DriversDriverId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypePreferenceID");

                    b.HasIndex("DriversDriverId");

                    b.ToTable("TypePreferences");
                });

            modelBuilder.Entity("Alex_Andersen.Models.UserMessages", b =>
                {
                    b.Property<int>("UserMessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("SenderReciever")
                        .HasColumnType("bit");

                    b.HasKey("UserMessageID");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DepartmentsDepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("DriversDriverId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserMessagesUserMessageID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("DepartmentsDepartmentID");

                    b.HasIndex("DriversDriverId");

                    b.HasIndex("UserMessagesUserMessageID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Cities", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Departments", null)
                        .WithMany("Cities")
                        .HasForeignKey("DepartmentsDepartmentID");

                    b.HasOne("Alex_Andersen.Models.Drivers", null)
                        .WithMany("Cities")
                        .HasForeignKey("DriversDriverId");

                    b.HasOne("Alex_Andersen.Models.Locations", null)
                        .WithMany("Cities")
                        .HasForeignKey("LocationsLocationID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Countries", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Cities", null)
                        .WithMany("Countries")
                        .HasForeignKey("CitiesCityID");

                    b.HasOne("Alex_Andersen.Models.Departments", null)
                        .WithMany("Countries")
                        .HasForeignKey("DepartmentsDepartmentID");

                    b.HasOne("Alex_Andersen.Models.Drivers", null)
                        .WithMany("Countries")
                        .HasForeignKey("DriversDriverId");

                    b.HasOne("Alex_Andersen.Models.Locations", null)
                        .WithMany("Countries")
                        .HasForeignKey("LocationsLocationID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Departments", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Trips", null)
                        .WithMany("Departments")
                        .HasForeignKey("TripsTripID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Drivers", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Availability", null)
                        .WithMany("drivers")
                        .HasForeignKey("AvailabilityID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Messages", b =>
                {
                    b.HasOne("Alex_Andersen.Models.UserMessages", null)
                        .WithMany("Messages")
                        .HasForeignKey("UserMessagesUserMessageID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Roles", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Users", null)
                        .WithMany("Roles")
                        .HasForeignKey("UsersUserID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Status", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Trips", null)
                        .WithMany("Statuses")
                        .HasForeignKey("TripsTripID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Trips", b =>
                {
                    b.HasOne("Alex_Andersen.Models.TripLocations", null)
                        .WithMany("Trips")
                        .HasForeignKey("TripLocationsTripLocationID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.TypePreferences", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Drivers", null)
                        .WithMany("TypePreferences")
                        .HasForeignKey("DriversDriverId");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Users", b =>
                {
                    b.HasOne("Alex_Andersen.Models.Departments", null)
                        .WithMany("Users")
                        .HasForeignKey("DepartmentsDepartmentID");

                    b.HasOne("Alex_Andersen.Models.Drivers", null)
                        .WithMany("Users")
                        .HasForeignKey("DriversDriverId");

                    b.HasOne("Alex_Andersen.Models.UserMessages", null)
                        .WithMany("Users")
                        .HasForeignKey("UserMessagesUserMessageID");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Availability", b =>
                {
                    b.Navigation("drivers");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Cities", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Departments", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Drivers", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");

                    b.Navigation("TypePreferences");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Locations", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Alex_Andersen.Models.TripLocations", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Trips", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("Alex_Andersen.Models.UserMessages", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Alex_Andersen.Models.Users", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
